pipeline {
    agent {
        kubernetes {
            label 'kuberagent'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
    volumeMounts:
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
  - name: dind
    image: docker:stable-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
    - name: DOCKER_CGROUPS
      value: "true"
    volumeMounts:
    - mountPath: /var/lib/docker
      name: dind-storage
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
  volumes:
  - emptyDir: {}
    name: dind-storage
  - emptyDir: {}
    name: workspace-volume
"""
        }
    }
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'saddff/flask_app'
    }
    stages {
        stage('Clone repository') {
            steps {
                checkout scm
            }
        }
        stage('Get Commit Hash') {
            steps {
                script {
                    COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.DOCKER_TAG = COMMIT_HASH
                }
            }
        }
        stage('Docker Login') {
            steps {
                container('dind') {
                    withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY'
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                container('dind') {
                    sh 'docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG -f python_app/Dockerfile .'
                }
            }
        }
        stage('Test Docker Image') {
            steps {
                container('dind') {
                    script {
                        // Run the container in detached mode
                        sh 'docker run -d --rm -p 5000:5000 --name test-container $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG'
                        sleep 10
                        sh 'curl -f http://localhost:5000 || (docker logs test-container && exit 1)'
                        sh 'docker stop test-container'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                container('dind') {
                    sh 'docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG'
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}